======================================================
README.FIRST - BarraCUDA 0.5.1 beta
======================================================


Thank you very much for downloading BarraCUDA.  This software is based on BWA version 0.4.9 and uses NVIDIA GPUs to accelerate the alignment of short sequencing reads from Next-generation Sequencers to a reference genome.  This package contains the source  codes of the program and also a set of sample data from the NCBI Sequencing Read Archive (www.ncbi.nlm.nih.gov/sra) for testing purposes.


System Requirements
----------------------
Before installing BarraCUDA, please ensure that your computer has:

- A modern x86-based processor
- 4 GB of system memory (for large genomes)
- At least 10 GB of disk space (for large genomes)
- An NVIDIA GPU with at least 1GB RAM and CUDA capability of 1.3 or above, or a Tesla C1060 with 4 GB RAM or above (for large genomes)
- A Linux/UNIX operating system

The software also requires:

- NVIDIA CUDA toolkit SDK version 3.2 or above
- NVIDIA graphics driver version 260.19.21 or above
- zlib-devel (or zlib1g-devel) library


Changes in 0.5 beta
----------------------
- initial release


Changes in 0.5.1 beta
----------------------
- Unified 32-bit and 64-bit source codes
- Now works with CUDA toolkit version 3.2 and NVIDIA driver 260.19.21 even for full genomes (< 4 gigabases)
- Add support for NVIDIA Fermi cards
- Drop support for older NVIDIA cards (now a GT200 based graphics with compute capability of 1.3 or above is required, e.g. GTX280, Tesla C1060 or above)
- Fixed an error in reporting alignment timings if compile with GCC 4.4.x
- Fixed the segmentation fault error when the program exits to the prompt
- Reduced maximum read length support from 125 to 80 bp to relief register pressure
- Add SAM headers in SAM output

Compiling BarraCUDA
----------------------

To compile BarraCUDA, make sure you have GCC 4.3 (or above) and CUDA toolkit SDK version 3.2 (or above) installed in the system.  The software should compile automatically by typing in the root directory of the source package:

	make all

and the binary "barracuda" should be generated and placed in 'bin' folder.


To perform a quick test to see if BarraCUDA can work with the GPU in your system, you can type:

	barracuda deviceQuery

and it should list out all the CUDA-capable devices available in your system, e.g. for a PC with an NVIDIA Geforce GTX295 and a Tesla C1060, it will list:

	0 895 13
	1 895 13
	2 4095 13

The first number is the CUDA device number, followed by the amount of GPU memory in MB and the third is CUDA compute capability, 13 means 1.3.


Pre-compiled binaries
---------------------

Pre-compiled binaries can also be downloaded from the project's SourceForge site.  However the binary would still requires NVIDIA toolkit and NVIDIA driver as those provide the run-time libraries for the program to work properly.


Sample data
-----------

A set of budding yeast data is included in the package and it is a trimmed version of 65536 35 bp sequencing reads from accession SRR002062 from the NCBI Sequencing Read Archive.

In order to test the functionality of BarraCUDA, you will need to perform the BWT-transformation of the yeast genome by:

	barracuda index sample_data/Saccharomyces_cerevisiae.SGD1.01.50.dna_rm.toplevel.fa

Then perform the alignment by:

	barracuda aln sample_data/Saccharomyces_cerevisiae.SGD1.01.50.dna_rm.toplevel.fa sample_data/sample_reads.fastq > quicktest.sai

And finally converting the format to SAM:

	barracuda samse sample_data/Saccharomyces_cerevisiae.SGD1.01.50.dna_rm.toplevel.fa quicktest.sai sample_data/sample_reads.fastq > quicktest.sam



For computers with multi-CUDA devices
--------------------------------------

For computers with more than one CUDA-capable GPU, BarraCUDA automatically selects the best GPU based on number of SIMT processors.  Users can also specify which CUDA device the software is to be executed on by using the ‘-C’ option followed by the device number.  In order to take advantage of multiple GPUs in a system, BarraCUDA is accompanied with two scripts, namely ‘barracuda-multi-se’ and ‘barracuda-multi-pe’ to align parallel single-end reads and paired-end reads respectively using multiple GPUs.  ‘barracuda-multi-se’ automatically detects the number of CUDA devices in the computer, splits the input .fastq read files according to the number of CUDA devices and calls multiple instances of BarraCUDA to align sequencing reads (aln and samse) in parallel.  Once the alignment finishes, the script joins the files back into one single SAM file. For paired-end reads, ‘barracuda-multi-pe’ calls two instances of BarraCUDA to align the two paired .fastq read files at the same time and generates a single SAM output using the ‘sampe’ core.  At the time of writing, ‘barracuda-multi-pe’ does not support more than 2 GPUs while ‘barracuda-multi-se’ is not bounded by the number of CUDA devices.

In order to use the scripts, you have to put the BarraCUDA binary into the default path by:

	export PATH=$PATH:<your_barracuda_bin_folder>

To call barracuda-multi-se, type:

	barracuda-multi-se <reference> <reads.fastq> <alignment.sam> -options

For barracuda-multi-pe:

	barracuda-multi-pe <reference> <reads1.fastq> <reads2.fastq> <alignment.sam> -options







